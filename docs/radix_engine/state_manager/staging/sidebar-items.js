window.SIDEBAR_ITEMS = {"enum":[["StagedSubstateStoreKey","Because the root store (which eventually is saved on disk) is not an StagedSubstateStoreNode/ImmutableStore we need to be able to distinguish it."]],"struct":[["ImmutableStore","An immutable/persistent store (i.e a store built from a [`parent`] store shares data with it). Note: while from the abstract representation point of view you can delete keys, the underlying data is freed only and only if there are no references to it (there are no paths from any root reference to the node representing that (key, value)). For this reason, extra steps are taken to free up (key, value) pairs accumulating over time. This is intended as an wrapper/abstraction layer, so that changes to the ReadableSubstateStore/WriteableSubstateStore traits are easier to maintain."],["StagedSubstateStore",""],["StagedSubstateStoreManager","Structure which manages the staged store tree"],["StagedSubstateStoreNode","Nodes form a tree towards the [`parent_key`]. If it is of type StagedSubstateStoreKey::RootStoreKey than the parent is the root store living in the StagedSubstateStoreManager. [`parent_key`] and [`children_keys`] are needed in order to traverse the tree. [`receipt`] applied to the parent’s store, results in this node store. We need to keep the [`receipt`] to both recompute the stores when doing the data reconstruction/“garbage collection” but also to retrieve it when caching."],["StagedSubstateStoreNodeKey",""]]};