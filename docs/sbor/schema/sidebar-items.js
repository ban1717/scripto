window.SIDEBAR_ITEMS = {"constant":[["CUSTOM_WELL_KNOWN_TYPE_START",""]],"enum":[["ChildNames",""],["GlobalTypeId","This is a global identifier for a type."],["LocalTypeIndex","This is the [`SchemaTypeLink`] used in a linearized [`Schema`] to link [`TypeKind`]s."],["TypeKind","A schema for the values that a codec can decode / views as valid"],["TypeValidation","Additional validation to apply to a payload of the given type, beyond validation from the [`TypeKind`]â€™s type structure."]],"fn":[["generate_full_schema",""],["generate_full_schema_from_single_type",""],["resolve_local_type_ref",""],["resolve_well_known_type",""]],"mod":[["basic_well_known_types",""],["custom_traits",""],["describe",""],["macros",""],["schema",""],["type_aggregator",""],["type_data",""],["type_link",""],["well_known_types",""]],"struct":[["LengthValidation","Represents additional validation that should be performed on the size."],["NovelTypeMetadata","This is the struct used in the Schema"],["NumericValidation","Represents additional validation that should be performed on the numeric value."],["ResolvedTypeData",""],["Schema","An array of custom type kinds, and associated extra information which can attach to the type kinds"],["TypeAggregator",""],["TypeData","Combines all data about a Type:"],["TypeMetadata","This enables the type to be represented as eg JSON Also used to facilitate type reconstruction"]],"trait":[["CustomTypeExtension",""],["CustomTypeKind",""],["CustomTypeValidation",""],["Describe","The `Describe` trait allows a type to describe how to interpret and validate a corresponding SBOR payload."],["SchemaTypeLink","Marker trait for a link between [`TypeKind`]s:"]],"type":[["TypeHash",""]]};